{
	"info": {
		"_postman_id": "cdcdc57a-79d7-4519-bace-28865fd9c7bf",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11059981"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "second",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"1. /*Отправить запрос.\r",
							"2. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.*/\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Karina\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"24\");\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"pm.test(\"Check name 2\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test(\"Check age 2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"Check salary 2\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"pm.test(\"Console_family_response\", function () {\r",
							"    console.log(jsonData.family);\r",
							"});\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = req_salary * 4;\r",
							"pm.test(\"Check salary 3\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Karina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "third",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Отправить запрос.\r",
							"2. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.*/\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"pm.test(\"Check name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test(\"Check age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"Check salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"pm.test(\"Console_family_response\", function () {\r",
							"    console.log(jsonData.family);\r",
							"});\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Luky name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Luky age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Yana&age=27&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yana"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fourth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*1. Отправить запрос.\r",
							"2. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"pm.test(\"Console_salary_request\", function () {\r",
							"    console.log(+req.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"pm.test(\"Console_salary_response\", function () {\r",
							"    console.log(jsonData.salary);\r",
							"});\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"pm.test(\"Console_salary_response\", function () {\r",
							"    console.log(jsonData.salary[0]);\r",
							"});\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Console_salary_response\", function () {\r",
							"    console.log(+jsonData.salary[1]);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Console_salary_response\", function () {\r",
							"    console.log(+jsonData.salary[2]);\r",
							"});\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"Salary 0\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 1\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+req_salary * 2);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary 2\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+req_salary * 3);\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"//16. Создать в окружении переменную age\r",
							"//17. Создать в окружении переменную salary\r",
							"//18. Передать в окружение переменную name\r",
							"let name = req.name;\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"let age = req.age;\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"let salary = req.salary;\r",
							"pm.environment.set(\"salary\", salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.*/\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"    console.log(+jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Olga&age=30&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fifth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start QA Salary\", function () {\r",
							"    pm.expect(jsonData).haveOwnProperty(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"QA Salary 6 months\", function () {\r",
							"    pm.expect(jsonData).haveOwnProperty(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"QA Salary 12 months\", function () {\r",
							"    pm.expect(jsonData).haveOwnProperty(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"QA Salary 1.5 year\", function () {\r",
							"    pm.expect(jsonData).haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"QA Salary 3.5 years\", function () {\r",
							"    pm.expect(jsonData).haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person\", function () {\r",
							"    pm.expect(jsonData).haveOwnProperty(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"pm.test(\"Check start salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 6 months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req_salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 12 months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req_salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 1.5 year\", function () {\r",
							"    pm.expect(jsonData[`qa_salary_after_1.5_year`]).to.eql(+req_salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 3.5 years\", function () {\r",
							"    pm.expect(jsonData[`qa_salary_after_3.5_years`]).to.eql(+req_salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary u_name\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"pm.test(\"Salary u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 5 years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req_salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.*/\r",
							"for (let key in jsonData.person) {\r",
							"  if(jsonData.person.hasOwnProperty(key)){\r",
							"    console.log(`${key} : ${jsonData.person[key]}`)\r",
							"  }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}